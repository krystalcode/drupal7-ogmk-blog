<?php
/**
 * @file
 * Code for the Commerce Marketplace Blog feature.
 */

include_once 'ogmk_blog.features.inc';

/**
 * Hooks.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ogmk_blog_form_ogmk_post_node_form_alter(&$form, &$form_state, $form_id) {
  // If the user cannot post globally (e.g. not without defining a shop
  // context), we mark the ogmk_shops_ref field as required.
  $can_post_globally = user_access('create ogmk_post content');

  if (!$can_post_globally) {
    $language = $form['ogmk_shops_ref']['#language'];
    $form['ogmk_shops_ref'][$language][0]['#required'] = TRUE;

    // If there is only 1 shop that the user can post to, there's no point in
    // displaying the field. Pre-select the only option and deny access to the
    // field.
    $shop_options = &$form['ogmk_shops_ref'][$language][0]['default']['#options'];

    // 1 Shop + the 'None' option = 2 options.
    if (count($shop_options) == 2) {
      unset($shop_options['_none']);
      $form['ogmk_shops_ref'][$language][0]['default']['#default_value'] = key($shop_options);
      $form['ogmk_shops_ref']['#access'] = FALSE;
    }
  }

  // Add a Cancel button.
  $form['actions']['cancel'] = array(
    '#type' => 'button',
    '#access' => TRUE,
    '#value' => t('Cancel'),
    '#attributes' => array('onClick' => 'history.go(-1);return true;'),
    '#weight' => 7,
  );

  // Code specific to the edit form.
  if ($form['nid']['#value'] !== NULL) {
    // Add a Publish/Unpublish button.
    /**
     * @Issue(
     *   "Check publication permissions which might be different than update
     *   permissions"
     *   type="bug"
     *   priority="normal"
     *   labels="permissions, security"
     * )
     */
    $form['actions']['publish'] = array(
      '#type' => 'submit',
      '#access' => TRUE,
      '#weight' => 6,
      '#submit' => array(
        '_ogmk_blog_post_publish_toggle_submit',
      )
    );

    // Customise button text and color depending on whether we are publishing or
    // unpublishing.
    if ($form['#node']->status) {
      $form['actions']['publish']['#value'] = t('Unpublish');
      $form['actions']['publish']['#attributes'] = array('class' => array('btn-danger'));
    }
    else {
      $form['actions']['publish']['#value'] = t('Publish');
      $form['actions']['publish']['#attributes'] = array('class' => array('btn-info'));
    }
  }
}

/**
 * Implements hook_path_alias_types().
 */
function ogmk_blog_path_alias_types() {
  $objects['ogmk_blog'] = t('OGMK Shop Blogs');
  return $objects;
}

/**
 * Implements hook_pathauto().
 */
function ogmk_blog_pathauto($op) {
  switch ($op) {
    case 'settings':
      $settings = array();
      $settings['module'] = 'ogmk_blog';
      $settings['token_type'] = 'node';
      $settings['groupheader'] = t('OGMK Blog paths');
      $settings['patterndescr'] = t('Default path pattern');
      $settings['patterndefault'] = 'shops/[node:nid]/blog';
      $settings['batch_update_callback'] = '_ogmk_blog__pathauto_bulk_update_batch_process';
      $settings['batch_file'] = drupal_get_path('module', 'ogmk_blog') . '/includes/ogmk_blog.pathauto.inc';

      /**
       * @Issue(
       *   "Implement language patterns for OGMK blog paths"
       *   type="improvement"
       *   priority="low"
       *   labels="internationalisation"
       * )
       */

      return (object) $settings;

    default:
      break;
  }
}

/**
 * Functions for internal use.
 */

/**
 * Form submit callback for toggling the publication status of a post.
 *
 * @Issue(
 *   "Refactor function for toggling publication/archive status to ogmk_base
 *   since it's reused for shops, products and posts"
 *   type="improvemenet"
 *   priority="low"
 *   labels="refactoring"
 * )
 */
function _ogmk_blog_post_publish_toggle_submit($form, &$form_state) {
  $node = $form['#node'];

  // Toggle the value of the 'status' field that indicates whether a node is
  // published or not.
  if ($node->status) {
    $node->status = 0;
    drupal_set_message(t('Post %title has been unpublished.', array('%title' => $node->title)));
  } else {
    $node->status = 1;
    drupal_set_message(t('Post %title has been published.', array('%title' => $node->title)));
  }

  node_save($node);

  // Set watchdog and Drupal message.
  $node_link = l(t('view'), 'node/' . $node->nid);
  $watchdog_args = array('@type' => $node->type, '%title' => $node->title);
  $t_args = array('@type' => node_type_get_name($node), '%title' => $node->title);
  watchdog('content', '@type: updated %title.', $watchdog_args, WATCHDOG_NOTICE, $node_link);

  if ($node->nid) {
    $form_state['values']['nid'] = $node->nid;
    $form_state['nid'] = $node->nid;
    $form_state['redirect'] = node_access('update', $node) ? 'node/' . $node->nid . '/edit' : '<front>';
  }
  else {
    // In the unlikely case something went wrong on save, the node will be
    // rebuilt and node form redisplayed the same way as in preview.
    drupal_set_message(t('The Post could not be saved.'), 'error');
    $form_state['rebuild'] = TRUE;
  }
  // Clear the page and block caches.
  cache_clear_all();
}
